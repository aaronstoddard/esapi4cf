# ESAPI Resource Bundle Messages
# 
# Keys are named in 4 parts:
# 1 - The ESAPI module
# 2 - The method name within the module
# 3 - Error* and/or Message
# 4 - The log type: userMessage or logMessage
#
# *Use HTML5 validation types where possible:
# - valueMissing
# - typeMismatch
# - patternMismatch
# - tooLong
# - rangeUnderflow
# - rangeOverflow
# - stepMismatch
# - badInput
# - customError
# - valid
# - failure
#
# Unit Test Messages
Unit.Test.message.basic=Test Basic Message
Unit.Test.message.format={0}Test {1} Message {2} Format{0}

# Encoder Messages
Encoder.canonicalize.badInput.userMessage=Input validation failure
Encoder.encodeForURL.typeMismatch.userMessage=Encoding failure
Encoder.encodeForURL.typeMismatch.logMessage=Encoding not supported
Encoder.encodeForURL.badInput.userMessage=Encoding failure
Encoder.encodeForURL.badInput.logMessage=Problem URL encoding input
Encoder.decodeFromURL.typeMismatch.userMessage=Decoding failure
Encoder.decodeFromURL.typeMismatch.logMessage=Decoding not supported
Encoder.decodeFromURL.badInput.userMessage=Decoding failure
Encoder.decodeFromURL.badInput.logMessage=Problem URL decoding input

# Validator Messages
Validator.getValidInput.typeMismatch.message=Validation misconfiguration, specified type to validate against was null: context={0}, type={2}, input={1}
Validator.getValidInput.valueMissing.userMessage={0}: Input required.
Validator.getValidInput.valueMissing.logMessage=Input required: context={0}, type={2}, input={1}
Validator.getValidInput.tooLong.userMessage={0}: Invalid input. The maximum length of {2} characters was exceeded.
Validator.getValidInput.tooLong.logMessage=Input exceeds maximum allowed length of {2} by {3} characters: context={0}, type={4}, input={1}
Validator.getValidInput.patternMismatch.message=Validation misconfiguration, specified type to validate against was null: context={0}, type={2}, input={1}
Validator.getValidInput.patternMismatch.userMessage={0}: Invalid input. Please conform to: {2} with a maximum length of {4}
Validator.getValidInput.patternMismatch.logMessage=Invalid input: context={0}, type={3}({2}), input={1}
Validator.getValidInput.badInput.userMessage={0}: Invalid input. An encoding error occurred.
Validator.getValidInput.badInput.logMessage=Error canonicalizing user input
Validator.getValidDate.rangeInvalid.userMessage={0}: Invalid date input: context
Validator.getValidDate.rangeInvalid.logMessage=Validation parameter error for date: maxValue ({2}) must be greater than minValue ({1}) for {0}
Validator.getValidDate.valueMissing.userMessage={0}: Input date required
Validator.getValidDate.valueMissing.logMessage=Input date required: context={0}, input={1}
Validator.getValidDate.patternMismatch.userMessage={0}: Invalid date must follow {2} format
Validator.getValidDate.patternMismatch.logMessage=Invalid date: context={0}, format={2}, input={1}
Validator.getValidDate.rangeUnderflowOverflow.userMessage={0}: Invalid date. Value must be between {2} and {3}
Validator.getValidDate.rangeUnderflowOverflow.logMessage=Invalid date input must be between {2} and {3}: context={0}, input={1}
Validator.getValidSafeHTML.valueMissing.userMessage={0}: Input HTML required
Validator.getValidSafeHTML.valueMissing.logMessage=Input HTML required: context={0}, input={1}
Validator.getValidSafeHTML.tooLong.userMessage={0}: Invalid HTML. You entered {1} characters. Input can not exceed {2} characters.
Validator.getValidSafeHTML.tooLong.logMessage={0} Input exceeds maxLength by {3} characters
Validator.getValidSafeHTML.badInput.userMessage=Invalid HTML input: context={0}
Validator.getValidSafeHTML.badInput.logMessage=Invalid HTML input: context={0}, errors={1}
Validator.getValidSafeHTML.scanError.userMessage={0}: Invalid HTML input
Validator.getValidSafeHTML.scanError.logMessage=Invalid HTML input: context={0} error={1}
Validator.getValidSafeHTML.policyError.userMessage={0}: Invalid HTML input
Validator.getValidSafeHTML.policyError.logMessage=Invalid HTML input does not follow rules in antisamy-esapi.xml: context={0} error={1}
Validator.getValidCreditCard.valueMissing.userMessage={0}: Input credit card required
Validator.getValidCreditCard.valueMissing.logMessage=Input credit card required: context={0}, input={1}
Validator.getValidCreditCard.badInput.userMessage={0}: Invalid credit card input
Validator.getValidCreditCard.badInput.logMessage=Invalid credit card input: context={0}
Validator.getValidDirectoryPath.valueMissing.userMessage={0}: Input directory path required
Validator.getValidDirectoryPath.valueMissing.logMessage=Input directory path required: context={0}, input={1}
Validator.getValidDirectoryPath.badInput.userMessage={0}: Invalid directory name
Validator.getValidDirectoryPath.badInput.logMessage=Invalid directory, does not exist: context={0}, input={1}
Validator.getValidDirectoryPath.typeMismatch.userMessage={0}: Invalid directory name
Validator.getValidDirectoryPath.typeMismatch.logMessage=Invalid directory, not a directory: context={0}, input={1}
Validator.getValidDirectoryPath.patternMismatch.userMessage={0}: Invalid directory name
Validator.getValidDirectoryPath.patternMismatch.logMessage=Invalid directory name does not match the canonical path: context={0}, input={1}, canonical={2}
Validator.getValidDirectoryPath.failure.userMessage={0}: Invalid directory name
Validator.getValidDirectoryPath.failure.logMessage=Failure to validate directory path: context={0}, input={1}
Validator.getValidFileName.valueMissing.userMessage={0}: Input file name required
Validator.getValidFileName.valueMissing.logMessage=Input required: context={0}, input={1}
Validator.getValidFileName.patternMismatch.userMessage={0}: Invalid file name
Validator.getValidFileName.patternMismatch.logMessage=Invalid directory name does not match the canonical path: context={0}, input={1}, canonical={2}
Validator.getValidFileName.badInput.userMessage={0}: Invalid file name
Validator.getValidFileName.badInput.logMessage=Invalid file name does not exist: context={0}, canonical={1}
Validator.getValidFileName.failure.userMessage={0}: Invalid file name
Validator.getValidFileName.failure.logMessage=Invalid file name: context={0}, canonical={1}
Validator.getValidFileName.typeMismatch.userMessage={0}: Invalid file name does not have valid extension ({1})
Validator.getValidFileName.typeMismatch.logMessage=Invalid file name does not have valid extension ({1}): context={0}, input={2}
Validator.getValidNumber.valueMissing.userMessage={0}: Input required
Validator.getValidNumber.valueMissing.logMessage=Input required: context={0}, input={1}
Validator.getValidNumber.patternMismatch.userMessage={0}: Invalid number must follow {2} format
Validator.getValidNumber.patternMismatch.logMessage=Invalid number: context={0}, format={2}, input={1}
Validator.getValidDouble.rangeInvalid.userMessage={0}: Invalid double input: context
Validator.getValidDouble.rangeInvalid.logMessage=Validation parameter error for double: maxValue ({2}) must be greater than minValue ({1}) for {0}
Validator.getValidDouble.valueMissing.userMessage={0}: Input required: context
Validator.getValidDouble.valueMissing.logMessage=Input required: context={0}, input={1}
Validator.getValidDouble.isInfinite.userMessage=Invalid double input: context={0}
Validator.getValidDouble.isInfinite.logMessage=Invalid double input is infinite: context={0}, input={1}
Validator.getValidDouble.isNaN.userMessage=Invalid double input: context={0}
Validator.getValidDouble.isNaN.logMessage=Invalid double input is infinite: context={0}, input={1}
Validator.getValidDouble.rangeUnderflowOverflow.userMessage=Invalid double input must be between {2} and {3}: context={0}
Validator.getValidDouble.rangeUnderflowOverflow.logMessage=Invalid double input must be between {2} and {3}: context={0}, input={1}
Validator.getValidDouble.patternMismatch.userMessage={0}: Invalid double input
Validator.getValidDouble.patternMismatch.logMessage=Invalid double input format: context={0}, input={1}
Validator.getValidInteger.rangeInvalid.userMessage={0}: Invalid Integer
Validator.getValidInteger.rangeInvalid.logMessage=Validation parameter error for double: maxValue ({2}) must be greater than minValue ({1}) for {0}
Validator.getValidInteger.valueMissing.userMessage={0}: Input required
Validator.getValidInteger.valueMissing.logMessage=Input required: context={0}, input={1}
Validator.getValidInteger.rangeUnderflowOverflow.userMessage={0}: Invalid Integer. Value must be between {2} and {3}
Validator.getValidInteger.rangeUnderflowOverflow.logMessage=Invalid integer input must be between {2} and {3}: context={0}, input={1}
Validator.getValidInteger.patternMismatch.userMessage={0}: Invalid integer input
Validator.getValidInteger.patternMismatch.logMessage=Invalid integer input: context={0}, input={1}
Validator.getValidFileContent.valueMissing.userMessage={0}: Input required
Validator.getValidFileContent.valueMissing.logMessage=Input required: context={0}, input={1}
Validator.getValidFileContent.tooLong.userMessage={0}: Invalid file content can not exceed {1} bytes
Validator.getValidFileContent.tooLong.logMessage=Exceeded maxBytes ({1})
Validator.getValidFileContent.ESAPItooLong.logMessage=Exceeded ESAPI max length
Validator.assertIsValidHTTPRequest.valueMissing.userMessage=Input required: HTTP request is null
Validator.assertIsValidHTTPRequest.valueMissing.logMessage=Input required: HTTP request is null
Validator.assertIsValidHTTPRequest.typeMismatch.userMessage=Bad HTTP method received
Validator.assertIsValidHTTPRequest.typeMismatch.logMessage=Bad HTTP method received: {0}
Validator.getValidListItem.valueMissing.userMessage={0}: Invalid list item
Validator.getValidListItem.valueMissing.logMessage=Invalid list item: context={0}, input={1}
Validator.assertIsValidHTTPRequestParameterSet.valueMissing.userMessage={0}: Invalid HTTP request missing parameters
Validator.assertIsValidHTTPRequestParameterSet.valueMissing.logMessage=Invalid HTTP request missing parameters {1}: context={0}
Validator.assertIsValidHTTPRequestParameterSet.badInput.userMessage={0}: Invalid HTTP request extra parameters {1}
Validator.assertIsValidHTTPRequestParameterSet.badInput.logMessage=Invalid HTTP request extra parameters {1}: context={0}
Validator.getValidPrintable.valueMissing.userMessage={0}: Input bytes required
Validator.getValidPrintable.valueMissing.logMessage=Input bytes required: context={0}, input={1}
Validator.getValidPrintable.tooLong.userMessage={0}: Input bytes can not exceed {2} bytes
Validator.getValidPrintable.tooLong.logMessage=Input exceeds maximum allowed length of {2} by {3} bytes: context={0}, input={1}
Validator.getValidPrintable.patternMismatch.userMessage={0}: Invalid input bytes: context={0}
Validator.getValidPrintable.patternMismatch.logMessage=Invalid non-ASCII input bytes, context={0}, input={1}
Validator.getValidPrintable.failure.userMessage={0}: Invalid printable input
Validator.getValidPrintable.failure.logMessage=Invalid encoding of printable input, context={0}, input={1}
Validator.safeReadLine.badInput.userMessage=Invalid input
Validator.safeReadLine.badInput.logMessage=Invalid readline. Must read a positive number of bytes from the stream
Validator.safeReadLine.tooLong.userMessage=Invalid input
Validator.safeReadLine.tooLong.logMessage=Invalid readLine. Read more than maximum characters allowed ({0})
Validator.safeReadLine.failure.userMessage=Invalid input
Validator.safeReadLine.failure.logMessage=Invalid readLine. Problem reading from input stream
Validator.getValidBoolean.valueMissing.userMessage={0}: Input boolean required
Validator.getValidBoolean.valueMissing.logMessage=Input boolean required: context={0}, input={1}
Validator.getValidBoolean.badInput.userMessage={0}: Invalid boolean input
Validator.getValidBoolean.badInput.logMessage=Invalid boolean input: context={0}, input={1}
